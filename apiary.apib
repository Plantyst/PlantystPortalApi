FORMAT: 1A
HOST: https://portal.plantyst.com/api/

# Plantyst Portal

Plantyst Portal API is a REST API designed to access data related to customer measurements like basic time series, metrics or annotations.

Some API responses use the HAL convention. HAL (Hypertext Application Language) is an standard convention for defining hypermedia such as links to external resources within JSON or XML code. The standard was initially proposed on June 2012 specifically for use with JSON and has since become available in two variations, JSON and XML. The two associated MIME types are media type: application/hal+xml and media type application/hal+json. See also https://en.wikipedia.org/wiki/Hypertext_Application_Language.

# Group OAuth2 Authorization

The authorization for the API calls uses token-based principle _JWT_ (_JSON Web Token_). The token has three main parts:

The OAuth2 workflow is designed to acquire a user token for the access to user resources in Plantyst through the public Api. The token serves as the authorization mechanism for the third party applications. The application needs to be registered in the Plantyst system, having its own client_id, client_secret and redirect_uri properties (to register new application, please contact us at [support@plantyst.com](mailto:support@plantyst.com). To get the access token, the application has to begin by redirecting the user to the following URL:

## OAuth login

### Get login page [GET]
To fet the login page, application has to redirect the user to the following URL: [https://portal.plantyst.com/OAuth/Authorize?client_id={client_id}&response_type=code&redirect_uri={url_encoded_redirect_uri}&state={optional_state_string}](https://portal.plantyst.com/OAuth/Authorize?client_id={client_id}&response_type=code&redirect_uri={url_encoded_redirect_uri}&state={optional_state_string}).
Where the query string parameters are the following:
* `client_id` - obtained during the registration process of the application
* `response_type` - the type of the authorization flow; currently, Platnyst supports only „code“ type
* `redirect_uri` - absolute URI to which the user will be redirect after successfull login
* `state` - optional parameter, returned back to redirect URL

Once the user logs in and confirms the delegation of the rights to the third party application, the server redirects the user to the given redirect URL and adds the temporary authorization code to the response query string. The authorization code is valid for 5 minutes.

In case of a login error, the next procedure is described in the RFC https://tools.ietf.org/html/rfc6749#section-4.2.2.1

+ Parameters
    + client_id (string, `9sgfr867q`) - Obtained during the registration process of the application.
    + response_type (string, `code`) - The type of the authorization flow; currently, Platnyst supports only „code“ type.
    + redirect_uri (string, `https://URL`) - Absolute URI to which the user will be redirect after successfull login.
    + state (string, `option`, optional) - Optional parameter, returned back to redirect URL.

+ Response 200 (application/json)

## JWT token [/OAuth/Token]

### Access token request [POST]
To get the actual acces token, the client application sends a POST request to the server with the following parameters:
* `grant_type` - "authorization_code"
* `code` - temporary authorizaion code from the first step
* `redirect_uri` - redirect_uri of the application
* `client_id` - client_id of the application
* `client_secret` - client_secret of the application

The response of the server is the user authorization token (JWT token) that can be used to authorize Api requests by the given user and contains expires_in which is the number of seconds until the token expires.
Refresh token is returned as well.

+ Request (application/json)
    + Attributes
        + `grant_type` (string, required) - "authorization_code"
        + `code` (string, required) - temporary authorizaion code from the first step
        + `redirect_uri` (string, required) - redirect_uri of the application
        + `client_id` (string, required) - client_id of the application
        + `client_secret` (string, required) - client_secret of the application

+ Response 200 (application/json)

# Group Measurements

This section contains endpoints for the resources related to measurements and their basic properties. A measurement is a key data type to which the most of other API data has a relation. A measurement object has the following properties:

* `measurementId` - unique identifier of the measurement
* `title` - title of the measurement
* `description` - additional description for the measurement
* `quantityType` - type of the measured quantity
* `archived` - determines whether the measurement is archived
* `first` - the date and time of the first collected data sample
* `rights` - the array of current user access rights for the measurement

The rights used in the Plantyst application are the following:
* _View_ - right to view measurement data
* _Contributor_ - right to add or update additional information (like annotations)
* _Admin_ - right to update measurement data (user access, tags, ...)
* _Owner_ - same as Admin, but the access rigths can't be revoked

## Measurements Collection [/Measurements/{?currentSubscriptionOnly}]

### List Measurements [GET]

Gets the list of measurements for which the current user has the access rights for view or higher. 

Along with the measurements, additional data are sent as the embedded resources as follows:
* `timezone` array of all distinct timezones assigned to measurements
* `tag` array of all distinct tags assigned to measurements
* `measurementDataVersion` array of measurement data versions

+ Parameters
    + currentSubscriptionOnly (boolean, `true`) - Determines whether all measurements or only measurements from the user's current subscription are returned.

+ Response 200 (application/hal+json)
    + Attributes
        + `timeZones` (array) - timezones referenced by the measurements
            + (object)
                + `id` (string) - the time zone identifier
                + `name` (string) - the time zone full name
                + `iana` (string) - the time zone IANA codeMe
        + `tags` (array) - tags created and assigned to the measurements
            + (object)
                + `id` (number) - the tag identifier
                + `title` (string) - the tag title
                + `color` (string) - the tag color represented hexadecimal color values
        + `dataVersions` (array) - versions of various measurement-related data
            + (object)
                + `id` (number) - the data version identifier
                + `title` (string) - the data type tile
                + `lastModified` (string) - the date and time of the last data modification
        + `resourceList` (array) - the array of _Measurement_ objects
            + (object)
                + `measurementId` (string)
                + `title` (string)
                + `description` (string)
                + `quantityType` (string)
                + `archived` (boolean)
                + `first` (string)
                + `rights` (array)
                    + (string) - assigned right
    + Body

            {
                "timeZones": [
                    {
                        "id": "Central Europe Standard Time",
                        "name": "(UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague",
                        "iana": "Europe/Prague",
                        "_links": [
                            {
                                "rel": "self",
                                "href": "~/Api/TimeZone/Central%20Europe%20Standard%20Time",
                                "title": null,
                                "isTemplated": false
                            }
                        ],
                    "_embedded": null
                    }
                ],
                "tags": [
                    {
                        "id": "83",
                        "title": "Technology",
                        "color": "#E67E22",
                        "_links": [
                            {
                                "rel": "self",
                                "href": "~/Api/Tag/83",
                                "title": null,
                                "isTemplated": false
                            }
                        ],
                        "_embedded": null
                    },
                    {
                        "id": "82",
                        "title": "Shop 1",
                        "color": "#1ABC9C",
                        "_links": [
                            {
                                "rel": "self",
                                "href": "~/Api/Tag/82",
                                "title": null,
                                "isTemplated": false
                            }
                        ],
                        "_embedded": null
                    }
                ],
                "dataVersions": [
                    {
                        "id": "414",
                        "title": "TimeSeries",
                        "lastModified": "2016-10-25T16:05:00Z",
                        "_links": [
                            {
                                "rel": "self",
                                "href": "~/Api/MeasurementDataVersion/414",
                                "title": null,
                                "isTemplated": false
                            }
                        ],
                        "_embedded": null
                    },
                    {
                        "id": "415",
                        "title": "TimeSeries",
                        "lastModified": "2016-10-25T16:05:00Z",
                        "_links": [
                            {
                                "rel": "self",
                                "href": "~/Api/MeasurementDataVersion/415",
                                "title": null,
                                "isTemplated": false
                            }
                        ],
                        "_embedded": null
                    }
                ],
                "resourceList": [
                {
                    "measurementId": 3,
                    "title": "Stroj 1",
                    "description": "Access for presentations",
                    "quantityType": "speed",
                    "archived": false,
                    "first": "2016-01-01T00:00:00Z",
                    "rights": [
                        "Admin"
                    ],
                    "_links": [
                        {
                            "rel": "self",
                            "href": "~/Api/Measurement/695",
                            "title": null,
                            "isTemplated": false
                        },
                        {
                            "rel": "timezone",
                            "href": "~/Api/TimeZone/Central%20Europe%20Standard%20Time",
                            "title": null,
                            "isTemplated": false
                        },
                        {
                            "rel": "tags",
                            "href": "~/Api/Tag/82",
                            "title": null,
                            "isTemplated": false
                        },
                        {
                            "rel": "dataVersions",
                            "href": "~/Api/MeasurementDataVersion/414",
                            "title": null,
                            "isTemplated": false
                        }
                ],
                "_embedded": null
                },
                {
                    "measurementId": 4,
                    "title": "Stroj 2",
                    "description": "Access for presentations",
                    "quantityType": "speed",
                    "archived": false,
                    "first": "2016-01-01T00:00:00Z",
                    "rights": [
                        "Admin"
                    ],
                    "_links": [
                        {
                            "rel": "self",
                            "href": "~/Api/Measurement/696",
                            "title": null,
                            "isTemplated": false
                        },
                        {
                            "rel": "timezone",
                            "href": "~/Api/TimeZone/Central%20Europe%20Standard%20Time",
                            "title": null,
                            "isTemplated": false
                        },
                        {
                            "rel": "tags",
                            "href": "~/Api/Tag/83",
                            "title": null,
                            "isTemplated": false
                        },
                        {
                            "rel": "dataVersions",
                            "href": "~/Api/MeasurementDataVersion/415",
                            "title": null,
                            "isTemplated": false
                        }
                    ],
                    "_embedded": null
                    }
                ],
                "_links": [
                    {
                        "rel": "self",
                        "href": "~/Api/Measurements",
                        "title": null,
                        "isTemplated": false
                    }
                ],
                "_embedded": null
            }

+ Response 401 (application/hal+json)
    + Body

            {
                "message":"Authorization has been denied for this request."
            }

+ Response 403  (application/hal+json)
    + Body

            {
                "message":"Forbidden."
            }

+ Response 404  (application/hal+json)
    + Body

            {
                "message":"Not Found."
            }

# Group Measurement Data

This section describes the API endpoints for accessing the basic measurement data.

## Measurement Time Series Aggregation Collection [/MeasurementTimeSeriesAggregationsQuery]

### List Measurement Time Series Aggregation [POST]

Gets the list of Time Series Aggregation items for the given measurement.

The request contains the definition of queries, each for one measurement. A required part of the query is the `View` parameter, which specifies the type of the data aggregation.
Available values are:
* `"Base.MinuteSet"` - set of atomic minute aggregations, each for one UTC minute
* `"Base.Hour"` - set of hour aggregations, each for one UTC hour
* `"Base.Day"` - set of day aggregations, each for one day in the measurement time zone
* `"Base.Month"` - set of month aggregations, each for one month in the measurement time zone

The response for the request contains the copy of the original query, the set of data items and the recipe for the interpretation of the data items (`outputFormat`).
Each item in the output format defines interpretation of the respective data item.
For five output format items and two data samples, there will be ten data items in the response. The array may contain the following values:
* `ItemCount` - defines the count of the atomic data items in the aggregation
* `TimeSquareSum` - auxiliary value for the optimized data computations
* `TimeSum` - auxiliary value for the optimized data computations
* `TimeValueSum` - auxiliary value for the optimized data computations
* `ValueSum` - specifies the overal (sum) value of the data item

+ Request (application/json)
    + Headers
    
            Authorization: Bearer
    + Attributes
        + Queries (array)
            + - (object)
                + `MeasurementId` (number, required) - unique measurement identifier
                + `From` (number, required) - UTC date and time in ISO 8061 format that specifies the lower bound of the data query
                + `To` (number, required) - UTC date and time in ISO 8061 format that specifies the upper bound of the data query
                + `View` (string, required) - specifies the requested time series type
                + `Precision` (number, required) - specifies the number of precision of the returned values
    + Body

            {
                "Queries": [
                    {
                        "MeasurementId": 3,
                        "From": "2017-06-01T00:00:00Z",
                        "To": "2017-06-01T00:09:00Z",
                        "View": "Base.MinuteSet",
                        "Precision": "2"
                    },
                    {
                        "MeasurementId": 4,
                        "From": "2017-05-31T21:00Z",
                        "To": "2017-05-31T23:00Z",
                        "View": "Base.Hour",
                        "Precision": "2"
                    }
                ]
            }

+ Response 200 (application/hal+json)
    + Attributes
        + `results` (array)
            + (object)
                + `query` (object)
                    + `MeasurementId` (number)
                    + `From` (number)
                    + `To` (number)
                    + `View` (string)
                    + `Precision` (number)
                + `outputFormat` (array) - defines the interpretation for the `data` section
                + `data` (array) - array of data items
                + `first` (string) - UTC date and time of first returned data item in ISO 8601 format

    + Body

            {
                "results": [
                    {
                        "query": {
                            "view": "Base.MinuteSet",
                            "precision": "2",
                            "measurementId": 3,
                            "from": "2017-05-31T22:00Z",
                            "to": "2017-05-31T22:09Z"
                        },
                        "outputFormat": [
                            "ValueSum"
                        ],
                        "data":[0,0,3,10,11,10,9,11,10,7],
                        "first":"2017-05-31Z22:00:00Z"
                    },
                    {
                        "query": {
                            "view": "Base.Hour",
                            "precision": "2",
                            "measurementId": 4,
                            "from": "2017-05-31T21:00Z",
                            "to": "2017-05-31T23:00Z"
                        },
                        "outputFormat": [
                            "ItemCount", "TimeSquareSum", "TimeSum", "TimeValueSum", "ValueSum"
                        ],
                        "data":[60,70210,1770,33352,1196,60,70210,1770,24442,963,60,70210,1770,45655,1512],
                        "first":"2017-05-31Z22:00:00Z"
                    }
                ]
            }

+ Response 401 (application/hal+json)
    + Body

            {
                "message":"Authorization has been denied for this request."
            }

+ Response 403  (application/hal+json)
    + Body

            {
                "message":"Forbidden."
            }

+ Response 404  (application/hal+json)
    + Body

            {
                "message":"Not Found."
            }

# Group Metadocuments

Resources related to metadocuments in the API. Metadocument is a general term for various types of measurement-related data like annotations, comments, jobs or downtime entries. Metadocument can be defined for a single time point or for time range. Metadocument has the following properties:

* `Guid` - unique identifier of the metadocument (mandatory)
* `MeasurementId` - identifier of the measurement to which the metadocument belongs (mandatory)
* `Type` - type of the metadocument (mandatory); available values:
    * `0` - undefined type
    * `1` - annotation
    * `2` - job
    * `3` - downtime
* `LastModified` - the date and time of the last modification in UTC
* `From` - start date and time in UTC
* `To`  - end date and time in UTC; To can have a value or be null; if To is same as From, then it is a single time point metadocument; if To is greater than From, then it is a time range metadocument; If To is null, then it is unlimited metadocument
* `Title` - metadocument title
* `Description` - extended description, enables _MarkDown_ markup language
* `CustomId` - user-defined identifier
* `Color` - color in hex color code
* `Setpoint` - setpoint for the metadocument; represents the desired value for the measured quantity
* `DowntimeCode` - related downtime code identifier
* `CreatorId` - user identifier of the metadocument creator
* `Operations` - operations defined as the array of string values
* `ProductionEntries` - embeded array of information about producted items like entry time, amount, OK or NOT OK items
* `Users` - embeded array of information about users
* `CustomId` - customer unique identifier
* `CreatorId` - the identifier of the user who created the metadocument
* `LastModified` - the last modified date of the metadocument
* `DowntimeCodeKey` - down time code key
* `PlannedFrom` - planned from date
* `PlannedTo` - planned to date
* `CustomFields` - object with custom fields
* `Comments` - embeded array of comment objects

A metadocument comment is a self-contained data type with the following properties:

* `Id` - identifier of the comment; unique within the metadocument
* `Text` - comment text
* `ModificationTime` - UTC date and time of the last modification

__Command-based architecture__

All operations over metadocuments that change their state are command-based, therefore the response for such actions is formed as the relative link to the location, where the result of the request should be checked.

## Add or Patch Metadocument [/Metadocuments/]

### Add Metadocument [POST]

Adds metadocument of given type for the specific measurement.

+ Request (application/hal+json)
    + Headers
    
            Authorization: Bearer
    + Attributes
        + `MeasurementId` (number, required)
        + `Type` (number, required)
        + `From` (string, required)
        + `To` (string)
        + `Title` (string)
        + `Description` (string)
        + `CustomId` (string)
        + `Setpoint` (number)
        + `Color` (string)
        + `Operations` (array)
        + `CustomFields` (array)
        + `DowntimeCode` (string)
        + `DowntimeCodeKey` (string)
        + `PlannedFrom` (string)
        + `PlannedTo` (string)

+ Response 200 (application/hal+json)
    + Attributes
        + `location` (string) - specifies the relative URL with the result of the requested operation

    + Body

            {
                location": "Api/MetadocumentCommandResults/b2ec82f2-1438-47cd-a982-6b2e3b0476c7"
            }

+ Response 401 (application/hal+json)
    + Body

            {
                "message":"Authorization has been denied for this request."
            }

+ Response 403 (application/hal+json)
    + Body

            {
                "message":"Forbidden."
            }

### Patch Metadocument [PATCH]

Updates the metadocument with specific Guid and given parameters.

+ Request (application/hal+json)
    + Headers
    
            Authorization: Bearer
    + Attributes
        + `Guid` (string, required)
        + `MeasurementId` (number)
        + `From` (string)
        + `To` (string)
        + `Title` (string)
        + `Description` (string)
        + `CustomId` (string)
        + `Setpoint` (number)
        + `Color` (string)
        + `Operations` (array)
        + `CustomFields` (array)
        + `DowntimeCode` (string)
        + `DowntimeCodeKey` (string)
        + `PlannedFrom` (string)
        + `PlannedTo` (string)

+ Response 200 (application/hal+json)
    + Attributes
        + `location` (string) - specifies the relative URL with the result of the requested operation

    + Body

            {
                location": "Api/MetadocumentCommandResults/b2ec82f2-1438-47cd-a982-6b2e3b0476c7"
            }

+ Response 401  (application/hal+json)
    + Body

            {
                "message":"Authorization has been denied for this request."
            }

+ Response 403  (application/hal+json)
    + Body

            {
                "message":"Forbidden."
            }

+ Response 404  (application/hal+json)
    + Body

            {
                "message":"Not Found."
            }

## Delete or Get Metadocument [/Metadocuments/{guid}]

### Delete Metadocument [DELETE]

Deletes the metadocument with specific Guid.

+ Parameters
    + guid (string, required, `e2dd39dc-5389-43b9-b855-426af762811f`) - unique identifier for the metadocument

+ Response 200 (application/hal+json)
    + Attributes
        + `location` (string) - specifies the relative URL with the result of the requested operation

    + Body

            {
                location": "Api/MetadocumentCommandResults/b2ec82f2-1438-47cd-a982-6b2e3b0476c7"
            }

+ Response 401  (application/hal+json)
    + Body

            {
                "message":"Authorization has been denied for this request."
            }

+ Response 403  (application/hal+json)
    + Body

            {
                "message":"Forbidden."
            }

+ Response 404  (application/hal+json)
    + Body

            {
                "message":"Not Found."
            }

### Get Metadocument [GET]

Gets metadocument with specific Guid with embedded comments.

+ Parameters
    + guid (string, required, `e2dd39dc-5389-43b9-b855-426af762811f`) - unique identifier for the metadocument

+ Response 200 (application/hal+json)
    + Attributes
        + `guid` (string)
        + `type` (number)
        + `title` (string)
        + `creatorId` (number)
        + `measurementId` (number)
        + `from` (string)
        + `to` (string)
        + `color` (string)
        + `setpoint` (number)
        + `lastModified` (string)
        + `_embedded` (object)
            + `comment` (array)
                + (object)
                    + `id` (number)
                    + `text` (string)
                    + `modificationTime` (string)

    + Body

            {
                "guid":"27a858a0-c244-4640-83f8-513dbc70c2e6",
                "type":3,
                "title":"Downtime title",
                "creatorId":497,
                "measurementId":3,
                "from":"2017-06-26T05:30:00Z",
                "to":"2017-06-26T07:30:00Z",
                "color":"#969614",
                "setpoint":50.0,
                "lastModified":"2017-06-26T09:25:15Z",
                "_links": {
                    "self": {
                        "href":"/Api/Metadocuments/27a858a0-c244-4640-83f8-513dbc70c2e6"
                    }
                },
                "_embedded": {
                    "comment": [
                        {
                            "id":1,
                            "text":"Comment text",
                            "modificationTime":"2017-07-19T11:52:12Z",
                            "_links": {
                                "self": {
                                    "href":"/Api/Metadocuments/27a858a0-c244-4640-83f8-513dbc70c2e6/Comments/1/"
                                },
                                "user": {
                                    "href":"/Api/User/101"
                                }
                            }
                        }
                    }
            }

+ Response 401 (application/hal+json)
    + Body

            {
                "message":"Authorization has been denied for this request."
            }

+ Response 403  (application/hal+json)
    + Body

            {
                "message":"Forbidden."
            }

+ Response 404  (application/hal+json)
    + Body

            {
                "message":"Not Found."
            }

## Add or patch Production Entry [/Metadocuments/{guid}/ProductionEntries]

### Add Production Entry [POST]

Adds production entry into metadocument.

+ Parameters
    + guid (string, required, `e2dd39dc-5389-43b9-b855-426af762811f`) - unique identifier for the metadocument

+ Request (application/hal+json)
    + Headers
    
            Authorization: Bearer
    + Attributes
        + `Value` (number, required)
        + `Type` (string, required)
        + `Note` (string)
        + `Time` (string)

+ Response 200 (application/hal+json)
    + Attributes
        + `location` (string) - specifies the relative URL with the result of the requested operation

    + Body

            {
                location": "Api/MetadocumentCommandResults/b2ec82f2-1438-47cd-a982-6b2e3b0476c7"
            }

+ Response 401  (application/hal+json)
    + Body

            {
                "message":"Authorization has been denied for this request."
            }

+ Response 403  (application/hal+json)
    + Body

            {
                "message":"Forbidden."
            }

+ Response 404  (application/hal+json)
    + Body

            {
                "message":"Not Found."
            }

### Patch Production Entry [PATCH]

Updates the production entry with specific Id and given parameters.

+ Request (application/hal+json)
    + Headers
    
            Authorization: Bearer
    + Attributes
        + `Id` (number, required)
        + `Value` (number, required)
        + `Type` (string, required)
        + `Note` (string)
        + `Time` (string)

+ Response 200 (application/hal+json)
    + Attributes
        + `location` (string) - specifies the relative URL with the result of the requested operation

    + Body

            {
                location": "Api/MetadocumentCommandResults/b2ec82f2-1438-47cd-a982-6b2e3b0476c7"
            }

+ Response 401  (application/hal+json)
    + Body

            {
                "message":"Authorization has been denied for this request."
            }

+ Response 403  (application/hal+json)
    + Body

            {
                "message":"Forbidden."
            }

+ Response 404  (application/hal+json)
    + Body

            {
                "message":"Not Found."
            }

## Get Metadocuments [/MetadocumentsQuery]

### Get Metadocuments [POST]

Gets the metadocuments for a given measurement and time range.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer
    + Attributes
        + Queries (array)
            + - (object)
                + `MeasurementId` (number, required)
                + `From` (string, required)
                + `To` (string, required)
    + Body

            {
                "Queries": [
                    {
                        "MeasurementId": 3,
                        "From": "2017-05-31T22:00:00Z",
                        "To": "2017-06-01T19:59:59Z"
                    }
                ]
            }

+ Response 200 (application/hal+json)
    + Attributes
        + `responseContinuation` (string) - continuation token if the returned data are too long for one response; empty if the query is fully satisfied
        + `dateTime` (string) - UTC date and time in ISO 8601 format for which the response is up to date
        + _links (object)
            + self (object)
                + href (string, required)
        + `_embedded` (object)
            + `user` (array)
                + (object)
                    + `userId` (number)
                    + `name` (string)
                    + _links (object)
                        + self (object)
                            + href (string, required)
            + `metadocument` (array)
                + (object)
                    + `guid` (string)
                    + `type` (number, required)
                    + `creatorId` (number)
                    + `measurementId` (number)
                    + `from` (string)
                    + `to` (string, required)
                    + `color` (string)
                    + `lastModified` (string)
                    + _links (object)
                        + self (object)
                            + href (string, required)
                    + `_embedded` (object)
                        + `comment` (array)
                            + (object)
                                + `id` (number)
                                + `text` (string)
                                + `modificationTime` (string)
                                + _links (object)
                                    + self (object)
                                        + href (string, required)
                                    + user (object)
                                        + href (string, required)
    + Body

            {
                "responseContinuation":"",
                "dateTime":"2017-07-13T07:03:03.211009Z",
                "_links": {
                    "self": {
                        "href":"/Api/MetadocumentsQuery/"
                    },
                "_embedded": {
                    "user": [
                        {
                            "userId":497,
                            "name":"Martin Kouďa",
                            "_links": {
                                "self": {
                                    "href":"/Api/User/497"
                                }
                            }
                        }
                    ],
                    "metadocument": [
                        {
                            "guid":"13f6a3b3-0416-49e9-81ed-fab139518c0d",
                            "type":1,
                            "creatorId":497,
                            "measurementId":3,
                            "from":"2017-06-01T10:18:00Z",
                            "to":"2017-06-01T10:18:00Z",
                            "color":"",
                            "lastModified":"2017-07-04T07:48:34Z",
                            "_links": {
                                "self": {
                                    "href":"/Api/Metadocuments/13f6a3b3-0416-49e9-81ed-fab139518c0d"
                                }
                            },
                            "_embedded": {
                                "comment": [
                                    {
                                        "id":0,
                                        "text":"Ahoj...",
                                        "modificationTime":"2017-07-03T12:00:56Z",
                                        "_links": {
                                            "self": {
                                                "href":"/Api/Metadocuments/13f6a3b3-0416-49e9-81ed-fab139518c0d/Comments/0/"
                                            },
                                            "user": {
                                                "href":"/Api/User/497"
                                            }
                                        }
                                    },
                                    {
                                        "id":1,
                                        "text":"Nazdar...",
                                        "modificationTime":"2017-07-04T07:48:41Z",
                                        "_links": {
                                            "self": {
                                                    "href":"/Api/Metadocuments/13f6a3b3-0416-49e9-81ed-fab139518c0d/Comments/1/"
                                                },
                                            "user": {
                                                "href":"/Api/User/497"
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            }

+ Response 401  (application/hal+json)
    + Body

            {
                "message":"Authorization has been denied for this request."
            }

+ Response 403  (application/hal+json)
    + Body

            {
                "message":"Forbidden."
            }

+ Response 404  (application/hal+json)
    + Body

            {
                "message":"Not Found."
            }
            
## Get Metadocument Command Result [/MetadocumentCommandResults/{guid}]

### Get Metadocument Command Result [GET]

Gets the metadocument command result.

+ Parameters
    + guid (string, required, `f57513ba-c004-45bc-b28c-610eb00de7c`) - unique identifier for the metadocument command

+ Response 200 (application/hal+json)
    + Attributes
        + `guid` (string) - unique identifier for the metadocument command
        + `result` (string) - text representation of the result
        + `processedDate` (string) - processed date and time of the command in ISO 8601 format
        + `metadocumentGuid` (string) - specifies identifier for the related metadocument

    + Body

            {
                "guid":"27a858a0-c244-4640-83f8-513dbc70c2e6",
                "result":"Success",
                "processedDate":"2017-06-26T05:30:00Z",
                "metadocumentGuid":"2b8748ba-8830-4350-b68b-2599d53f2701",
                "_links": {
                    "self": {
                        "href":"/Api/MetadocumentCommandResults/f57513ba-c004-45bc-b28c-610eb00de7c"
                    },
                    "metadocument": {
                        "href":"/Api/Metadocuments/27a858a0-c244-4640-83f8-513dbc70c2e6"
                    }
                }
            }

+ Response 401 (application/hal+json)
    + Body

            {
                "message":"Authorization has been denied for this request."
            }

+ Response 403  (application/hal+json)
    + Body

            {
                "message":"Forbidden."
            }

+ Response 404  (application/hal+json)
    + Body

            {
                "message":"Not Found."
            }

## Add or Patch Metadocument Comment [/Metadocuments/{guid}/Comments]

### Add Metadocument Comment [POST]

Adds comment to the specific metadocument.

+ Parameters
    + guid (string, required) - Specifies the unique identifier for the metadocument.

+ Request (application/hal+json)
    + Headers
    
            Authorization: Bearer
    + Attributes
        + `Text` (string)

    + Body

            {
                "Text":"Comment text."
            }

+ Response 200 (application/hal+json)
    + Attributes
        + `location` (string) - specifies the relative URL with the result of the requested operation

    + Body

            {
              "location":"Api/MetadocumentCommandResults/deefa769-b7c4-4bb2-901d-89938caded5f"
            }

+ Response 401 (application/hal+json)
    + Body

            {
                "message":"Authorization has been denied for this request."
            }

+ Response 403  (application/hal+json)
    + Body

            {
                "message":"Forbidden."
            }

+ Response 404  (application/hal+json)
    + Body

            {
                "message":"Not Found."
            }

### Patch Metadocument Comment [PATCH]

Updates comment for the specific metadocument.

+ Parameters
    + guid (string, required) - Specifies the unique identifier for the metadocument.

+ Request (application/hal+json)
    + Headers
    
            Authorization: Bearer
    + Attributes
        + `Id` (number, required)
        + `Text` (string)
        
    + Body

            {
                "Id":12,
                "Text":"Comment text."
            }

+ Response 200 (application/hal+json)
    + Attributes
        + `location` (string) - specifies the relative URL with the result of the requested operation

    + Body

            {
              "location":"Api/MetadocumentCommandResults/deefa769-b7c4-4bb2-901d-89938caded5f"
            }

+ Response 401 (application/hal+json)
    + Body

            {
                "message":"Authorization has been denied for this request."
            }

+ Response 403  (application/hal+json)
    + Body

            {
                "message":"Forbidden."
            }

+ Response 404  (application/hal+json)
    + Body

            {
                "message":"Not Found."
            }

## Delete Metadocument Comment [/Metadocuments/{guid}/Comments/{id}]

### Delete Metadocument Comment [DELETE]

Deletes comment for the specific metadocument.

+ Parameters
    + guid (string, required) - the unique identifier of the metadocument
    + id (number, required) - the unique identifier of the comment and its version within the metadocument

+ Request (application/hal+json)
    + Headers

             Authorization: Bearer

+ Response 200 (application/hal+json)
    + Attributes
        + `location` (string) - specifies the relative URL with the result of the requested operation

    + Body

            {
              "location":"Api/MetadocumentCommandResults/deefa769-b7c4-4bb2-901d-89938caded5f"
            }

+ Response 401 (application/hal+json)
    + Body

            {
                "message":"Authorization has been denied for this request."
            }

+ Response 403  (application/hal+json)
    + Body

            {
                "message":"Forbidden."
            }

+ Response 404  (application/hal+json)
    + Body

            {
                "message":"Not Found."
            }
            
# Group CSV file with JOBs

To upload a CSV with JOBs you need an access token and CSV file according to the following specification: coding UTF-8, separated by commas and containing header. We will prepare this access token for you (please contact us at support@plantyst.com).

Response for such actions is formed as the relative link to the location, where the result of the request should be checked. States Waiting and InProgress relates to waiting in queue of requests and processing progress. State Success indicates successful completion, state DataError occurs when CSV file contains invalid data and/or request for adjustment JOBs for measurements in which user have not sufficient rights.

## Upload CSV file [/JobTypesImportCommands]

### Upload CSV file [POST]

Uploads the CSV file with JOBs.

The content of these CSV file must be MIME multipart content and only single file upload is supported.

A response object has the following properties:

* `location` (string) - specifies the relative URL with the result of the requested operation

+ Request (multipart/form-data; boundary=boundary value)
    + Headers
    
            Authorization: Bearer
    + Body
    
            --{boundary value}
            Content-Disposition: form-data; name="jobTypesFile"; filename="jobs.csv"
            Content-Type: application/vnd.ms-excel
            
            {file content}
            --{boundary value}--

+ Response 200 (application/hal+json)
    + Body

            {
              "location":"api/commandResults/5ad8938c-21dc-4b51-9b2c-3a8bfb2b816d"
            }

## Get job types [/JobTypes]

### Get job types [GET]

Gets the list of uploaded JOBs.

A response object has the following properties:

* `jobTypeId` - unique JOB identifier
* `title` - title of the JOB
* `setpoint` - speed prescription
* `measurementId` - unique measurement identifier
* `plannedFrom` - planned from date
* `plannedTo` - planned to date
* `isPermanent` - is the JOB permanent
* `currentState` - current state
* `maximumProductionCoefficient` - maximum production coefficient
* `order` - order
* `commandGuid` - unique command identifier
* `description` - description
* `operations` - operations
* `targetAmount` - target amount
* `customFields` - custom fields

+ Response 200 (application/hal+json)
    + Body

            {
              "resourceList": [
                {
                  "jobTypeId": 42457026,
                  "title": "Zakázka 1",
                  "setpoint": 50,
                  "measurementId": 1770,
                  "plannedFrom": "2019-07-02T06:50:00Z",
                  "plannedTo": "2019-07-02T07:20:00Z",
                  "isPermanent": false,
                  "currentState": "Available",
                  "maximumProductionCoefficient": null,
                  "order": 1,
                  "commandGuid": "5ad8938c-21dc-4b51-9b2c-3a8bfb2b816d",
                  "description": null,
                  "operations": null,
                  "targetAmount": null,
                  "customFields": null,
                  "_links": [
                    {
                      "rel": "self",
                      "href": "~/Api/JobTypes/42457026",
                      "title": null,
                      "isTemplated": false
                    }
                  ],
                  "_embedded": null
                },
                {
                  "jobTypeId": 41205284,
                  "title": "01.SP",
                  "setpoint": 36.67,
                  "measurementId": 1771,
                  "plannedFrom": null,
                  "plannedTo": null,
                  "isPermanent": false,
                  "currentState": "Available",
                  "maximumProductionCoefficient": null,
                  "order": 1,
                  "commandGuid": "1d8a6a09-d957-4969-9c69-2a061d6c92f4",
                  "description": null,
                  "operations": null,
                  "targetAmount": null,
                  "customFields": null,
                  "_links": [
                    {
                      "rel": "self",
                      "href": "~/Api/JobTypes/41205284",
                      "title": null,
                      "isTemplated": false
                    }
                  ],
                  "_embedded": null
                },
              ]
            }